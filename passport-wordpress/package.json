{
  "name": "passport-wordpress",
  "version": "0.0.3",
  "description": "Wordpress OAuth2 strategy for Passport.",
  "keywords": [
    "passport",
    "wordpress",
    "auth",
    "authn",
    "authentication",
    "identity"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/mjpearson/passport-wordpress.git"
  },
  "bugs": {
    "url": "http://github.com/mjpearson/passport-wordpress/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "main": "./lib/passport-wordpress",
  "dependencies": {
    "pkginfo": "0.2.x",
    "passport-oauth": "~0.1.1"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "_id": "passport-wordpress@0.0.3",
  "_from": "passport-wordpress@latest",
  "readme": "# Passport-Wordpress\n\n[Passport](https://github.com/jaredhanson/passport) strategy for authenticating\nwith [Wordpress](http://wordpress.com) using the OAuth 2.0 API.\n\n## Install\n\n    $ npm install passport-wordpress\n\n## Usage\n\n#### Configure Strategy\n\nThe Wordpress authentication strategy authenticates users using a Wordpress\naccount and OAuth 2.0 tokens.  The strategy requires a `verify` callback, which\naccepts these credentials and calls `done` providing a user, as well as\n`options` specifying a client ID, client secret, and callback URL.\n\n    passport.use(new WordpressStrategy({\n        clientID: CLIENT_ID,\n        clientSecret: CLIENT_SECRET\n      },\n      function(accessToken, refreshToken, profile, done) {\n        User.findOrCreate({ WordpressId: profile.id }, function (err, user) {\n          return done(err, user);\n        });\n      }\n    ));\n\n#### Authenticate Requests\n\nUse `passport.authorize()`, specifying the `'Wordpress'` strategy, to\nauthenticate requests.\n\nFor example, as route middleware in an [Express](http://expressjs.com/)\napplication:\n\n    app.get('/auth/wordpress',\n      passport.authorize('wordpress'));\n\n    app.get('/auth/wordpress/callback', \n      passport.authorize('wordpress', { failureRedirect: '/login' }),\n      function(req, res) {\n        // Successful authentication, redirect home.\n        res.redirect('/');\n      });\n\n## Thanks\n\n  - [Jared Hanson](http://github.com/jaredhanson)\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2013 Michael Pearson <[http://github.com/mjpearson](http://github.com/mjpearson)>",
  "readmeFilename": "README.md",
  "dist": {
    "shasum": "c0f4f72edc1fe98876d3a2bf72b12fd6b37d2a21"
  }
}
